{"version":3,"sources":["util/firebase.js","components/ChatListItem.jsx","components/IncomingMessage.jsx","components/OutgoingMessage.jsx","util/settings.js","util/websocket.js","components/ChatPanel.jsx","components/NewChat.jsx","pages/ChatPage.jsx","pages/LoginPage.jsx","App.js","registerServiceWorker.js","index.js"],"names":["fire","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ChatListItem","_this","this","react_default","a","createElement","index_es","button","onClick","props","onChatItemClicked","chat_id","src","primary","name","Component","IncomingMessage","date","hour","getHours","amOrPM","dateString","concat","getMinutes","getMonth","getDate","className","profilePicture","alt","message","OutgoingMessage","BASE_URL","window","location","host","socket","chat_callback","ChatPanel","state","messages","nextProps","_this2","startTime","setState","auth","currentUser","getIdToken","then","token","fetch","headers","authorization","res","json","messagesEnd","scrollIntoView","behavior","_this3","push","messagesObj","i","length","Owner","uid","components_OutgoingMessage","Message","Date","Time_Sent","replace","components_IncomingMessage","profile_picture","_this4","renderMessages","style","float","clear","ref","el","inputComponent","_ref","inputRef","Object","objectWithoutProperties","assign","components","Control","TextField_default","fullWidth","InputProps","inputProps","objectSpread","selectProps","classes","input","innerRef","children","innerProps","textFieldProps","Menu","Paper_default","square","paper","MultiValue","Chip_default","tabIndex","label","classNames","chip","defineProperty","chipFocused","isFocused","onDelete","removeProps","deleteIcon","Cancel_default","NoOptionsMessage","Typography_default","color","noOptionsMessage","Option","MenuItem_default","buttonRef","selected","component","fontWeight","isSelected","Placeholder","placeholder","SingleValue","singleValue","ValueContainer","valueContainer","NewChat","names","suggestions","chat_name","handleChange","value","users","ID","id","map","suggestion","event","target","_this$props","theme","selectStyles","base","palette","text","& input","font","marginTop","onChange","handleChatNameChange","bind","type","marginBottom","react_select_esm","styles","InputLabelProps","shrink","options","multi","isMulti","Button_default","variant","onCreateChatClicked","method","body","JSON","stringify","members","Content-Type","onNewChat","withStyles","root","flexGrow","height","display","padding","flexWrap","flex","alignItems","margin","spacing","unit","backgroundColor","emphasize","grey","fontSize","position","left","zIndex","right","divider","withTheme","drawerWidth","ClippedDrawer","shouldShowNewChat","chats","current_chat_id","undefined","gotChats","_handleKeyPress","e","key","sendChatTest","current_chat","Chat_ID","user","getChats","keys","history","AppBar_default","appBar","Toolbar_default","noWrap","textTransform","signOut","email","Drawer_default","drawerPaper","List_default","ChatBubbleOutline_default","Divider_default","renderChats","renderNewChat","renderChat","components_ChatListItem","containerStr","content","components_NewChat","onChatCreated","_this$state","inputText","emit","_this5","components_ChatPanel","onKeyPress","aria-hidden","overflow","drawer","whiteSpace","width","transition","transitions","create","easing","sharp","duration","enteringScreen","background","default","minWidth","toolbar","mixins","stylesCard","cardStyle","paddingLeft","paddingRight","paddingTop","paddingBottom","divStyle","justifyContent","flexDirection","buttonStyle","errorStyle","LoginPage","password","error","signUpScreen","renderContent","errorMsg","autoComplete","emailChanged","passwordChanged","nameChanged","profilePictureChanged","size","signUp","loginScreen","signIn","signInWithEmailAndPassword","catch","errorMessage","_this$state2","createUserWithEmailAndPassword","App","BrowserRouter","Route","exact","path","render","ChatPage","pages_LoginPage","onAuthStateChanged","require","query","on","console","log","msg","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","src_App","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.319ac1bb.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nvar config = {\n    apiKey: 'AIzaSyB7780W1NWElLt08G9K8AxakK29ocEVwNs',\n    authDomain: 'independent-studies-2018-2019.firebaseapp.com',\n    databaseURL: 'https://independent-studies-2018-2019.firebaseio.com',\n    projectId: 'independent-studies-2018-2019',\n    storageBucket: 'independent-studies-2018-2019.appspot.com',\n    messagingSenderId: '523918752724'\n};\nvar fire = firebase.initializeApp(config);\nexport default fire;\n","import React, { Component } from 'react';\nimport { ListItem, Avatar, ListItemText } from '@material-ui/core';\n\nclass ChatListItem extends Component {\n    render() {\n        return (\n            <ListItem\n                button\n                onClick={() => this.props.onChatItemClicked(this.props.chat_id)}\n            >\n                <Avatar src=\"/resources/BobSaget.jpg\" />\n                <ListItemText primary={this.props.name} />\n            </ListItem>\n        );\n    }\n}\n\nexport default ChatListItem;\n","import React, { Component } from 'react';\nimport { Avatar } from '@material-ui/core';\n\nclass IncomingMessage extends Component {\n    render() {\n        const date = this.props.date;\n\n        var hour = date.getHours();\n        var amOrPM = 'AM';\n\n        var months = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December'\n        ];\n\n        if (hour > 12) {\n            hour = hour % 12;\n            amOrPM = 'PM';\n        }\n\n        const dateString = ` ${date.getHours()}:${date.getMinutes()} ${amOrPM} | ${\n            months[date.getMonth()]\n        } ${date.getDate()}`;\n\n        return (\n            <div className=\"incoming_msg\">\n                <div className=\"incoming_msg_name\">\n                    <p>{this.props.name}</p>\n                </div>\n                <div className=\"incoming_msg_img\">\n                    {' '}\n                    <Avatar src={this.props.profilePicture} alt=\"sunil\" />{' '}\n                </div>\n                <div className=\"received_msg\">\n                    <div className=\"received_withd_msg\">\n                        <p>{this.props.message}</p>\n                        <span className=\"time_date\">{dateString}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default IncomingMessage;\n","import React, { Component } from 'react';\n\nclass OutgoingMessage extends Component {\n    render() {\n        const date = this.props.date;\n\n        var hour = date.getHours();\n        var amOrPM = 'AM';\n\n        var months = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December'\n        ];\n\n        if (hour > 12) {\n            hour = hour % 12;\n            amOrPM = 'PM';\n        }\n\n        const dateString = ` ${date.getHours()}:${date.getMinutes()} ${amOrPM} | ${\n            months[date.getMonth()]\n        } ${date.getDate()}`;\n\n        return (\n            <div className=\"outgoing_msg\">\n                <div className=\"sent_msg\">\n                    <p>{this.props.message}</p>\n                    <span className=\"time_date\">{dateString}</span>{' '}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default OutgoingMessage;\n","export const BASE_URL =\n    !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n        ? 'http://localhost:3000'\n        : `https://${window.location.host}`;\n","import firebase from '../util/firebase';\nimport { BASE_URL } from './settings';\nlet socket = {};\n\nlet chat_callback = function() {};\n\nexport const socketConnect = () => {\n    firebase\n        .auth()\n        .currentUser.getIdToken(true)\n        .then(token => {\n            socket = require('socket.io-client')(`${BASE_URL}`, {\n                query: { token }\n            });\n            socket.on('connect', function() {\n                console.log('connected!');\n            });\n            socket.on('disconnect', function() {});\n            socket.on('chat', function(msg) {\n                console.log('CHAT!');\n                console.log(msg);\n                chat_callback(msg);\n            });\n        });\n};\n\nexport const setupChatCallback = callback => {\n    chat_callback = callback;\n};\n\nexport const sendChat = (chat_id, message) => {\n    socket.emit('chat', { chat_id, message });\n};\n","import React, { Component } from 'react';\nimport IncomingMessage from './IncomingMessage';\nimport OutgoingMessage from './OutgoingMessage';\nimport firebase from '../util/firebase';\nimport { setupChatCallback } from '../util/websocket';\n\nimport { BASE_URL } from '../util/settings';\n\nclass ChatPanel extends Component {\n    state = { messages: [] };\n\n    componentWillReceiveProps(nextProps) {\n        // You don't have to do this check first, but it can help prevent an unneeded render\n        if (nextProps.startTime !== this.state.startTime) {\n            this.setState({ startTime: nextProps.startTime });\n        }\n\n        if (nextProps.chat_id && firebase.auth().currentUser) {\n            firebase\n                .auth()\n                .currentUser.getIdToken(true)\n                .then(token => {\n                    fetch(\n                        `${BASE_URL}/api/chats/messages/${nextProps.chat_id}`,\n                        {\n                            headers: {\n                                authorization: token\n                            }\n                        }\n                    )\n                        .then(res => {\n                            return res.json();\n                        })\n                        .then(json => {\n                            this.setState({ messages: json });\n                            this.messagesEnd.scrollIntoView({\n                                behavior: 'smooth'\n                            });\n                        });\n                });\n        }\n    }\n\n    componentDidMount() {\n        setupChatCallback(message => {\n            const { messages } = this.state;\n            messages.push(message);\n            this.setState({ messages });\n            this.messagesEnd.scrollIntoView({ behavior: 'smooth' });\n        });\n    }\n\n    renderMessages() {\n        if (firebase.auth().currentUser) {\n            const { messages } = this.state;\n            let messagesObj = [];\n            for (let i = 0; i < messages.length; i++) {\n                if (messages[i].Owner === firebase.auth().currentUser.uid) {\n                    messagesObj.push(\n                        <OutgoingMessage\n                            message={messages[i].Message}\n                            date={\n                                new Date(\n                                    messages[i].Time_Sent.replace(' ', 'T')\n                                )\n                            }\n                        />\n                    );\n                } else {\n                    messagesObj.push(\n                        <IncomingMessage\n                            message={messages[i].Message}\n                            date={\n                                new Date(\n                                    messages[i].Time_Sent.replace(' ', 'T')\n                                )\n                            }\n                            name={messages[i].name}\n                            profilePicture={messages[i].profile_picture}\n                        />\n                    );\n                }\n            }\n\n            return messagesObj;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"mesgs\">\n                <div>\n                    {this.renderMessages()}\n                    <div\n                        style={{ float: 'left', clear: 'both' }}\n                        ref={el => {\n                            this.messagesEnd = el;\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ChatPanel;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { emphasize } from '@material-ui/core/styles/colorManipulator';\nimport Button from '@material-ui/core/Button';\nimport { Input } from '@material-ui/core';\nimport firebase from '../util/firebase';\nimport { BASE_URL } from '../util/settings';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        height: 250\n    },\n    input: {\n        display: 'flex',\n        padding: 0\n    },\n    valueContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flex: 1,\n        alignItems: 'center'\n    },\n    chip: {\n        margin: `${theme.spacing.unit / 2}px ${theme.spacing.unit / 4}px`\n    },\n    chipFocused: {\n        backgroundColor: emphasize(\n            theme.palette.type === 'light'\n                ? theme.palette.grey[300]\n                : theme.palette.grey[700],\n            0.08\n        )\n    },\n    noOptionsMessage: {\n        padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`\n    },\n    singleValue: {\n        fontSize: 16\n    },\n    placeholder: {\n        position: 'absolute',\n        left: 2,\n        fontSize: 16\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: theme.spacing.unit,\n        left: 0,\n        right: 0\n    },\n    divider: {\n        height: theme.spacing.unit * 2\n    }\n});\n\nfunction NoOptionsMessage(props) {\n    return (\n        <Typography\n            color=\"textSecondary\"\n            className={props.selectProps.classes.noOptionsMessage}\n            {...props.innerProps}\n        >\n            {props.children}\n        </Typography>\n    );\n}\n\nfunction inputComponent({ inputRef, ...props }) {\n    return <div ref={inputRef} {...props} />;\n}\n\nfunction Control(props) {\n    return (\n        <TextField\n            fullWidth\n            InputProps={{\n                inputComponent,\n                inputProps: {\n                    className: props.selectProps.classes.input,\n                    inputRef: props.innerRef,\n                    children: props.children,\n                    ...props.innerProps\n                }\n            }}\n            {...props.selectProps.textFieldProps}\n        />\n    );\n}\n\nfunction Option(props) {\n    return (\n        <MenuItem\n            buttonRef={props.innerRef}\n            selected={props.isFocused}\n            component=\"div\"\n            style={{\n                fontWeight: props.isSelected ? 500 : 400\n            }}\n            {...props.innerProps}\n        >\n            {props.children}\n        </MenuItem>\n    );\n}\n\nfunction Placeholder(props) {\n    return (\n        <Typography\n            color=\"textSecondary\"\n            className={props.selectProps.classes.placeholder}\n            {...props.innerProps}\n        >\n            {props.children}\n        </Typography>\n    );\n}\n\nfunction SingleValue(props) {\n    return (\n        <Typography\n            className={props.selectProps.classes.singleValue}\n            {...props.innerProps}\n        >\n            {props.children}\n        </Typography>\n    );\n}\n\nfunction ValueContainer(props) {\n    return (\n        <div className={props.selectProps.classes.valueContainer}>\n            {props.children}\n        </div>\n    );\n}\n\nfunction MultiValue(props) {\n    return (\n        <Chip\n            tabIndex={-1}\n            label={props.children}\n            className={classNames(props.selectProps.classes.chip, {\n                [props.selectProps.classes.chipFocused]: props.isFocused\n            })}\n            onDelete={props.removeProps.onClick}\n            deleteIcon={<CancelIcon {...props.removeProps} />}\n        />\n    );\n}\n\nfunction Menu(props) {\n    return (\n        <Paper\n            square\n            className={props.selectProps.classes.paper}\n            {...props.innerProps}\n        >\n            {props.children}\n        </Paper>\n    );\n}\n\nconst components = {\n    Control,\n    Menu,\n    MultiValue,\n    NoOptionsMessage,\n    Option,\n    Placeholder,\n    SingleValue,\n    ValueContainer\n};\n\nclass NewChat extends Component {\n    state = {\n        names: null,\n        suggestions: [],\n        chat_name: ''\n    };\n    handleChange = name => value => {\n        this.setState({\n            names: value\n        });\n    };\n\n    componentDidMount() {\n        fetch(`${BASE_URL}/api/users`)\n            .then(res => {\n                return res.json();\n            })\n            .then(json => {\n                let users = [];\n                for (let i = 0; i < json.length; i++) {\n                    if (json[i].ID !== firebase.auth().currentUser.uid) {\n                        users.push({ label: json[i].name, id: json[i].ID });\n                    }\n                }\n                this.setState({\n                    suggestions: users.map(suggestion => ({\n                        value: suggestion.label,\n                        label: suggestion.label,\n                        id: suggestion.id\n                    }))\n                });\n            });\n    }\n\n    handleChatNameChange(event) {\n        this.setState({ chat_name: event.target.value });\n    }\n\n    render() {\n        const { classes, theme } = this.props;\n\n        const selectStyles = {\n            input: base => ({\n                ...base,\n                color: theme.palette.text.primary,\n                '& input': {\n                    font: 'inherit'\n                }\n            })\n        };\n        return (\n            <div style={{ marginTop: 60 }}>\n                <Input\n                    onChange={this.handleChatNameChange.bind(this)}\n                    type=\"text\"\n                    value={this.state.chat_name}\n                    placeholder=\"Chat Name\"\n                    style={{ marginBottom: 20 }}\n                    fullWidth\n                />\n\n                <Select\n                    classes={classes}\n                    styles={selectStyles}\n                    textFieldProps={{\n                        label: 'Chat members',\n                        InputLabelProps: {\n                            shrink: true\n                        }\n                    }}\n                    options={this.state.suggestions}\n                    components={components}\n                    value={this.state.multi}\n                    onChange={this.handleChange('multi')}\n                    placeholder=\"Select one or more people\"\n                    isMulti\n                />\n                <Button\n                    variant=\"outlined\"\n                    style={{ marginTop: 10 }}\n                    onClick={this.onCreateChatClicked.bind(this)}\n                >\n                    Create Chat\n                </Button>\n            </div>\n        );\n    }\n\n    onCreateChatClicked() {\n        if (this.state.chat_name) {\n            firebase\n                .auth()\n                .currentUser.getIdToken(true)\n                .then(token => {\n                    fetch(`${BASE_URL}/api/chats`, {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            chat_name: this.state.chat_name,\n                            members: this.state.names\n                        }),\n                        headers: {\n                            'Content-Type': 'application/json',\n                            authorization: token\n                        }\n                    }).then(() => {\n                        this.props.onNewChat();\n                    });\n                });\n        }\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewChat);\n","import React, { Component } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ChatIcon from '@material-ui/icons/ChatBubbleOutline';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Button, ListItem, ListItemText, Avatar } from '@material-ui/core';\n\nimport ChatListItem from '../components/ChatListItem';\nimport ChatPanel from '../components/ChatPanel';\nimport NewChat from '../components/NewChat';\nimport firebase from '../util/firebase';\nimport { sendChat } from '../util/websocket';\nimport { BASE_URL } from '../util/settings';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        zIndex: 1,\n        overflow: 'hidden',\n        position: 'relative',\n        display: 'flex',\n        height: '100vh',\n        flex: 1\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    content: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.default,\n        padding: theme.spacing.unit * 3,\n        minWidth: 0 // So the Typography noWrap works\n    },\n    toolbar: theme.mixins.toolbar\n});\n\nconst drawerWidth = 240;\n\nclass ClippedDrawer extends Component {\n    state = {\n        shouldShowNewChat: false,\n        chats: [],\n        current_chat_id: undefined,\n        gotChats: false\n    };\n\n    getChats() {\n        firebase\n            .auth()\n            .currentUser.getIdToken(true)\n            .then(token => {\n                fetch(`${BASE_URL}/api/chats`, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        authorization: token\n                    }\n                })\n                    .then(res => {\n                        return res.json();\n                    })\n                    .then(json => {\n                        let current_chat = undefined;\n                        if (json.length > 0) {\n                            current_chat = json[0].Chat_ID;\n                        }\n                        this.setState({\n                            chats: json,\n                            current_chat_id: current_chat\n                        });\n                    });\n            });\n    }\n\n    render() {\n        const { classes, user } = this.props;\n        const { shouldShowNewChat } = this.state;\n\n        if (firebase.auth().currentUser && !this.state.gotChats) {\n            this.setState({ gotChats: true });\n            this.getChats();\n        }\n\n        if (Object.keys(user).length === 0) {\n            this.props.history.push('/Login');\n        }\n\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"absolute\" className={classes.appBar}>\n                    <Toolbar>\n                        <Typography\n                            variant=\"title\"\n                            color=\"inherit\"\n                            noWrap\n                            style={{ flex: 1 }}\n                        >\n                            Comic Sans Chat\n                        </Typography>\n\n                        <Button\n                            label=\"Default\"\n                            style={{ textTransform: 'none', color: 'white' }}\n                            onClick={this.signOut.bind(this)}\n                        >\n                            {user.email || ''}\n                        </Button>\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    variant=\"permanent\"\n                    classes={{\n                        paper: classes.drawerPaper\n                    }}\n                >\n                    <List style={{ marginTop: 60 }}>\n                        <ListItem\n                            button\n                            onClick={() =>\n                                this.setState({ shouldShowNewChat: true })\n                            }\n                        >\n                            <Avatar>\n                                <ChatIcon />\n                            </Avatar>\n                            <ListItemText primary={`Create new Chat`} />\n                        </ListItem>\n                        <Divider />\n                        {this.renderChats()}\n                    </List>\n                </Drawer>\n                {shouldShowNewChat ? this.renderNewChat() : this.renderChat()}\n            </div>\n        );\n    }\n\n    onChatCreated() {\n        this.setState({ shouldShowNewChat: false });\n        this.getChats();\n    }\n\n    renderChats() {\n        let chats = [];\n        for (let i = 0; i < this.state.chats.length; i++) {\n            chats.push(\n                <div key={this.state.chats[i]['Chat_ID']}>\n                    <ChatListItem\n                        chat_id={this.state.chats[i]['Chat_ID']}\n                        onChatItemClicked={chat_id =>\n                            this.onChatItemClicked(chat_id)\n                        }\n                        name={this.state.chats[i]['chat_name']}\n                    />\n                    <Divider />\n                </div>\n            );\n        }\n        return chats;\n    }\n\n    onChatItemClicked(chat_id) {\n        this.setState({ shouldShowNewChat: false, current_chat_id: chat_id });\n    }\n\n    signOut() {\n        firebase.auth().signOut();\n    }\n\n    navigateToLogin() {\n        this.props.history.push('/Login');\n    }\n\n    renderNewChat() {\n        const { classes } = this.props;\n\n        const containerStr = `${classes.content} main-content`;\n        return (\n            <main className={containerStr}>\n                <NewChat onNewChat={this.onChatCreated.bind(this)} />\n            </main>\n        );\n    }\n\n    sendChatTest() {\n        const { inputText, current_chat_id } = this.state;\n\n        if (inputText) {\n            sendChat(current_chat_id, inputText);\n            this.setState({ inputText: '' });\n        }\n    }\n\n    _handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            this.sendChatTest();\n        }\n    };\n\n    renderChat() {\n        const { classes } = this.props;\n\n        const containerStr = `${classes.content} main-content`;\n        return (\n            <main className={containerStr}>\n                <div />\n                <ChatPanel chat_id={this.state.current_chat_id} />\n                <div className=\"type_msg\">\n                    <div className=\"input_msg_write\">\n                        <input\n                            type=\"text\"\n                            className=\"write_msg\"\n                            placeholder=\"Type a message\"\n                            onChange={text => {\n                                this.setState({ inputText: text.target.value });\n                            }}\n                            value={this.state.inputText}\n                            onKeyPress={this._handleKeyPress.bind(this)}\n                        />\n                        <button\n                            className=\"msg_send_btn\"\n                            type=\"button\"\n                            onClick={() => this.sendChatTest()}\n                        >\n                            <i\n                                className=\"far fa-paper-plane\"\n                                aria-hidden=\"true\"\n                            />\n                        </button>\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nClippedDrawer.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(ClippedDrawer);\n","import React, { Component } from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    withStyles,\n    Card,\n    Button,\n    TextField\n} from '@material-ui/core';\n\nimport firebase from '../util/firebase';\nimport { BASE_URL } from '../util/settings';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        zIndex: 1,\n        overflow: 'hidden',\n        position: 'relative',\n        display: 'flex',\n        height: '100vh',\n        flex: 1\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    content: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.default,\n        padding: theme.spacing.unit * 3,\n        minWidth: 0 // So the Typography noWrap works\n    },\n    toolbar: theme.mixins.toolbar\n});\n\nconst drawerWidth = 240;\n\nconst stylesCard = {\n    cardStyle: {\n        margin: 10,\n        paddingLeft: 10,\n        paddingRight: 10,\n        width: 500,\n        paddingTop: 10,\n        paddingBottom: 10\n    },\n    divStyle: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    buttonStyle: {\n        marginTop: 10\n    },\n    errorStyle: {\n        color: 'red',\n        marginBottom: 10\n    }\n};\n\nclass LoginPage extends Component {\n    state = {\n        email: '',\n        password: '',\n        error: '',\n        name: '',\n        profilePicture: '',\n        signUpScreen: false\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        if (Object.keys(this.props.user).length > 0) {\n            this.props.history.push('/');\n        }\n\n        const containerStr = `${classes.content} main-content`;\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"absolute\" className={classes.appBar}>\n                    <Toolbar>\n                        <Typography\n                            variant=\"title\"\n                            color=\"inherit\"\n                            noWrap\n                            style={{ flex: 1 }}\n                        >\n                            Comic Sans Chat\n                        </Typography>\n                        <Button color=\"inherit\">Login</Button>\n                    </Toolbar>\n                </AppBar>\n\n                <main className={containerStr}>\n                    <div className={classes.toolbar} />\n                    <div style={stylesCard.divStyle}>\n                        {this.renderContent()}\n                    </div>\n                </main>\n            </div>\n        );\n    }\n\n    renderContent() {\n        var errorMsg =\n            this.state.error !== '' && this.state.error !== undefined ? (\n                <p style={stylesCard.errorStyle}>{this.state.error}</p>\n            ) : null;\n        if (!this.state.signUpScreen) {\n            return (\n                <Card style={stylesCard.cardStyle}>\n                    <Typography variant=\"headline\" component=\"h3\">\n                        Please Sign In\n                    </Typography>\n                    <TextField\n                        id=\"email-input\"\n                        label=\"Email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        margin=\"normal\"\n                        fullWidth\n                        value={this.state.email}\n                        error={this.state.error !== ''}\n                        onChange={event =>\n                            this.emailChanged(event.target.value)\n                        }\n                    />\n                    <TextField\n                        id=\"password-input\"\n                        label=\"Password\"\n                        type=\"password\"\n                        autoComplete=\"password\"\n                        margin=\"normal\"\n                        fullWidth\n                        value={this.state.password}\n                        error={this.state.error !== ''}\n                        onChange={event =>\n                            this.passwordChanged(event.target.value)\n                        }\n                    />\n                    {errorMsg}\n                    <div>\n                        <Button\n                            variant=\"contained\"\n                            size=\"large\"\n                            color=\"primary\"\n                            onClick={this.signIn.bind(this)}\n                            style={{\n                                ...stylesCard.buttonStyle,\n                                flex: 1,\n                                float: 'right'\n                            }}\n                        >\n                            Submit\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            size=\"large\"\n                            color=\"primary\"\n                            onClick={this.signUpScreen.bind(this)}\n                            style={{ ...stylesCard.buttonStyle, float: 'left' }}\n                        >\n                            Sign Up\n                        </Button>\n                    </div>\n                </Card>\n            );\n        } else {\n            return (\n                <Card style={stylesCard.cardStyle}>\n                    <Typography variant=\"headline\" component=\"h3\">\n                        Please Sign Up\n                    </Typography>\n                    <TextField\n                        id=\"email-input\"\n                        label=\"Email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        margin=\"normal\"\n                        fullWidth\n                        value={this.state.email}\n                        error={this.state.error !== ''}\n                        onChange={event =>\n                            this.emailChanged(event.target.value)\n                        }\n                    />\n                    <TextField\n                        id=\"password-input\"\n                        label=\"Password\"\n                        type=\"password\"\n                        autoComplete=\"password\"\n                        margin=\"normal\"\n                        fullWidth\n                        value={this.state.password}\n                        error={this.state.error !== ''}\n                        onChange={event =>\n                            this.passwordChanged(event.target.value)\n                        }\n                    />\n                    <TextField\n                        id=\"password-input\"\n                        label=\"Name\"\n                        type=\"text\"\n                        autoComplete=\"name\"\n                        margin=\"normal\"\n                        fullWidth\n                        value={this.state.name}\n                        error={this.state.error !== ''}\n                        onChange={event => this.nameChanged(event.target.value)}\n                    />\n                    <TextField\n                        id=\"password-input\"\n                        label=\"Profile Picture\"\n                        type=\"text\"\n                        margin=\"normal\"\n                        fullWidth\n                        value={this.state.profilePicture}\n                        error={this.state.error !== ''}\n                        onChange={event =>\n                            this.profilePictureChanged(event.target.value)\n                        }\n                    />\n                    {errorMsg}\n                    <div>\n                        <Button\n                            variant=\"contained\"\n                            size=\"large\"\n                            color=\"primary\"\n                            onClick={this.signUp.bind(this)}\n                            style={{\n                                ...stylesCard.buttonStyle,\n                                flex: 1,\n                                float: 'right'\n                            }}\n                        >\n                            Submit\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            size=\"large\"\n                            color=\"primary\"\n                            onClick={this.loginScreen.bind(this)}\n                            style={{ ...stylesCard.buttonStyle, float: 'left' }}\n                        >\n                            Log In\n                        </Button>\n                    </div>\n                </Card>\n            );\n        }\n    }\n\n    emailChanged(email) {\n        this.setState({\n            email\n        });\n    }\n\n    passwordChanged(password) {\n        this.setState({ password });\n    }\n\n    nameChanged(name) {\n        this.setState({ name });\n    }\n\n    profilePictureChanged(profilePicture) {\n        this.setState({ profilePicture });\n    }\n\n    signIn() {\n        const { email, password } = this.state;\n\n        if (email === '' || email === undefined) {\n            this.setState({ error: 'Email is required' });\n            return;\n        }\n\n        if (password === '' || password === undefined) {\n            this.setState({ error: 'Password is required' });\n            return;\n        }\n\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .catch(error => {\n                var errorMessage = error.message;\n                this.setState({ error: errorMessage });\n            });\n    }\n\n    signUp() {\n        const { email, password, name, profilePicture } = this.state;\n\n        if (email === '' || email === undefined) {\n            this.setState({ error: 'Email is required' });\n            return;\n        }\n\n        if (password === '' || password === undefined) {\n            this.setState({ error: 'Password is required' });\n            return;\n        }\n\n        firebase\n            .auth()\n            .createUserWithEmailAndPassword(email, password)\n            .then(() => {\n                firebase\n                    .auth()\n                    .currentUser.getIdToken(true)\n                    .then(token => {\n                        fetch(`${BASE_URL}/api/users`, {\n                            method: 'POST',\n                            body: JSON.stringify({\n                                name,\n                                profile_picture: profilePicture\n                            }),\n                            headers: {\n                                'Content-Type': 'application/json',\n                                authorization: token\n                            }\n                        });\n                    });\n            })\n            .catch(error => {\n                this.setState({ error: error.message });\n            });\n    }\n\n    signUpScreen() {\n        this.setState({ signUpScreen: true, error: '' });\n    }\n\n    loginScreen() {\n        this.setState({ signUpScreen: false, error: '' });\n    }\n}\n\nexport default withStyles(styles)(LoginPage);\n","import React, { Component } from 'react';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport firebase from './util/firebase';\nimport ChatPage from './pages/ChatPage';\nimport LoginPage from './pages/LoginPage';\nimport { socketConnect } from './util/websocket';\n\nclass App extends Component {\n    state = {\n        user: {}\n    };\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Route\n                        exact\n                        path=\"/\"\n                        render={props => (\n                            <ChatPage {...props} user={this.state.user} />\n                        )}\n                    />\n                    <Route\n                        path=\"/login\"\n                        render={props => (\n                            <LoginPage {...props} user={this.state.user} />\n                        )}\n                    />\n                </div>\n            </Router>\n        );\n    }\n\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                this.setState({ user });\n                socketConnect();\n            } else {\n                // User is signed out.\n                // ...\n                this.setState({ user: {} });\n            }\n        });\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}